{"version":3,"file":"camelcase.js","sourceRoot":"","sources":["../src/camelcase.ts"],"names":[],"mappings":"AAAA,IAAM,iBAAiB,GAAG,UAAC,MAAc;IACvC,IAAI,eAAe,GAAG,KAAK,CAAC;IAC5B,IAAI,eAAe,GAAG,KAAK,CAAC;IAC5B,IAAI,mBAAmB,GAAG,KAAK,CAAC;IAEhC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACtC,IAAM,SAAS,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;QAE5B,IAAI,eAAe,IAAI,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;YAClD,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACpD,eAAe,GAAG,KAAK,CAAC;YACxB,mBAAmB,GAAG,eAAe,CAAC;YACtC,eAAe,GAAG,IAAI,CAAC;YACvB,CAAC,EAAE,CAAC;SACL;aAAM,IACL,eAAe;YACf,mBAAmB;YACnB,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,EAC3B;YACA,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,GAAG,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YAC5D,mBAAmB,GAAG,eAAe,CAAC;YACtC,eAAe,GAAG,KAAK,CAAC;YACxB,eAAe,GAAG,IAAI,CAAC;SACxB;aAAM;YACL,eAAe;gBACb,SAAS,CAAC,WAAW,EAAE,KAAK,SAAS;oBACrC,SAAS,CAAC,WAAW,EAAE,KAAK,SAAS,CAAC;YACxC,mBAAmB,GAAG,eAAe,CAAC;YACtC,eAAe;gBACb,SAAS,CAAC,WAAW,EAAE,KAAK,SAAS;oBACrC,SAAS,CAAC,WAAW,EAAE,KAAK,SAAS,CAAC;SACzC;KACF;IAED,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AAEF,IAAM,QAAQ,GAAG,UAAC,GAAW;IAC3B,OAAO,GAAG;SACP,OAAO,CAAC,iCAAiC,EAAE,UAAC,CAAC,EAAE,EAAU;QACxD,OAAA,EAAE,CAAC,WAAW,EAAE;IAAhB,CAAgB,CACjB;SACA,OAAO,CAAC,4BAA4B,EAAE,UAAC,CAAS,IAAK,OAAA,CAAC,CAAC,WAAW,EAAE,EAAf,CAAe,CAAC,CAAC;AAC3E,CAAC,CAAC;AAEF,MAAM,CAAC,IAAM,SAAS,GAAG,UAAC,GAAW;IACnC,IAAI,MAAM,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;IAExB,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;QACvB,OAAO,EAAE,CAAC;KACX;IAED,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;QACvB,OAAO,MAAM,CAAC,WAAW,EAAE,CAAC;KAC7B;IAED,IAAM,YAAY,GAAG,MAAM,KAAK,MAAM,CAAC,WAAW,EAAE,CAAC;IAErD,IAAI,YAAY,EAAE;QAChB,MAAM,GAAG,iBAAiB,CAAC,MAAM,CAAC,CAAC;KACpC;IAED,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC;IAEvD,OAAO,QAAQ,CAAC,MAAM,CAAC,CAAC;AAC1B,CAAC,CAAC","sourcesContent":["const preserveCamelCase = (string: string): string => {\n  let isLastCharLower = false;\n  let isLastCharUpper = false;\n  let isLastLastCharUpper = false;\n\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n\n    if (isLastCharLower && /[\\p{Lu}]/u.test(character)) {\n      string = string.slice(0, i) + \"-\" + string.slice(i);\n      isLastCharLower = false;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = true;\n      i++;\n    } else if (\n      isLastCharUpper &&\n      isLastLastCharUpper &&\n      /[\\p{Ll}]/u.test(character)\n    ) {\n      string = string.slice(0, i - 1) + \"-\" + string.slice(i - 1);\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = false;\n      isLastCharLower = true;\n    } else {\n      isLastCharLower =\n        character.toLowerCase() === character &&\n        character.toUpperCase() !== character;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper =\n        character.toUpperCase() === character &&\n        character.toLowerCase() !== character;\n    }\n  }\n\n  return string;\n};\n\nconst camelize = (key: string) => {\n  return key\n    .replace(/[_.\\- ]+([\\p{Alpha}\\p{N}_]|$)/gu, (_, p1: string) =>\n      p1.toUpperCase()\n    )\n    .replace(/\\d+([\\p{Alpha}\\p{N}_]|$)/gu, (m: string) => m.toUpperCase());\n};\n\nexport const camelcase = (key: string): string => {\n  let newKey = key.trim();\n\n  if (newKey.length === 0) {\n    return \"\";\n  }\n\n  if (newKey.length === 1) {\n    return newKey.toLowerCase();\n  }\n\n  const hasUpperCase = newKey !== newKey.toLowerCase();\n\n  if (hasUpperCase) {\n    newKey = preserveCamelCase(newKey);\n  }\n\n  newKey = newKey.replace(/^[_.\\- ]+/, \"\").toLowerCase();\n\n  return camelize(newKey);\n};\n"]}